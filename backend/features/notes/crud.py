from sqlalchemy.orm import Session
from features.notes.models import Note, Label

# Database Operations.

# Get all notes.
def get_all_notes(db: Session):
    return db.query(Note).all()

# Get all visible notes.
def get_all_visible_notes(db: Session):
    return db.query(Note).filter(Note.visibility == True).all()

# Post a note.
def create_note(db: Session, content: str, labels: list[str], visibility: bool = True):
    new_note = Note(content=content, visibility=visibility)
    
    for label_name in labels:
        label = db.query(Label).filter(Label.name == label_name).first()
        if not label:
            label = Label(name=label_name)
        new_note.labels.append(label)
    
    db.add(new_note)
    db.commit()
    db.refresh(new_note) # To get the autogenerated ID
    return new_note

# Update a note.
def update_note(db: Session, note_id: int, content: str = None, labels: list[str] = None, visibility: bool = None):
    note = db.query(Note).filter(Note.id == note_id).first()
    if not note:
        return None
    
    if content is not None:
        note.content = content
    if visibility is not None:
        note.visibility = visibility
    if labels is not None:
        note.labels.clear()
        for label_name in labels:
            label = db.query(Label).filter(Label.name == label_name).first()
            if not label:
                label = Label(name=label_name)
            note.labels.append(label)
    
    db.commit()
    db.refresh(note)
    return note

# Delete a note.
def delete_note(db: Session, note_id: int):
    note = db.query(Note).filter(Note.id == note_id).first()
    if not note:
        return False
    db.delete(note)
    db.commit()
    return True

# Get notes by searching a set of labels.
def get_notes_by_labels(db: Session, label_names: list[str], include_private: bool = False):
    query = db.query(Note).join(Note.labels).filter(Label.name.in_(label_names))
    if not include_private:
        query = query.filter(Note.visibility == True)
    return query.distinct().all()